---
import Layout from "@/layouts/Layout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import {
	profile,
	socialLinks as rawSocialLinks,
	type SocialLink,
	type MainLink,
	type LinkSection,
} from "@/lib/links-data.ts";
import { Button } from "@/components/ui/button";
import { ProfileImage } from "@/components/ProfileImage";
import {
	Github,
	Linkedin,
	Twitter,
	Rss,
	Link as LinkIcon,
	Instagram,
	Youtube,
	Facebook,
	Music2,
	Globe,
	Mail,
	MessageCircleMore,
} from "lucide-react";
import type { LucideIcon } from "lucide-react";

// Define mapping for small social icons
const iconComponents: Record<string, LucideIcon> = {
	github: Github,
	linkedin: Linkedin,
	twitter: Twitter,
	instagram: Instagram,
	youtube: Youtube,
	facebook: Facebook,
	tiktok: Music2,
	globe: Globe,
	// Add other icons as needed
};

// Process social links for easier rendering
const socialLinks = rawSocialLinks.map((link) => ({
	...link,
	Icon: iconComponents[link.icon || ""] || LinkIcon, // Add Icon component reference
}));

// Fetch latest blog posts
const blogPosts = (await getCollection("blog"))
	.sort(
		(a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
			b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
	)
	.slice(0, 5); // Show latest 5 posts, adjust as needed

// Combine blog posts with other potential links (example structure)
const mainLinks: LinkSection[] = [
	// {
	//   title: "Ãšltimos Posts del Blog",
	//   links: blogPosts.map(post => ({
	//     href: `/blog/${post.slug}/`,
	//     text: post.data.title,
	//     Icon: 'rss' // Use RSS icon for blog posts
	//   }))
	// },
	{
		title: "âœ¨ Destacado",
		links: [
			{
				href: "https://chat.whatsapp.com/FlFidSlo4TXKvxOPzcM0Nf",
				text: "ðŸŽ¬ Aprende a crear videos con IA",
				Icon: "messageCircleMore",
				glow: true, // This button will have glow effect
			},
		],
	},
	{
		title: "ðŸŒŸ Sobre mÃ­",
		links: [
			{
				href: "/",
				text: "Descubre mi perfil completo y proyectos",
				Icon: "globe",
				glow: false,
			},
		],
	},

	// You could add other sections here, e.g.:
	// { title: "Proyectos", links: projectLinks.map(...) },
];

// Map icon names to components for main links
const getIconComponent = (iconName?: string) => {
	if (!iconName) return LinkIcon;
	const iconMap: Record<string, LucideIcon> = {
		messageCircleMore: MessageCircleMore,
		globe: Globe,
		rss: Rss,
		// Add more as needed
	};
	return iconMap[iconName] || LinkIcon;
};
---

<Layout title={`Links | ${profile.name}`}>
  <div class="min-h-screen bg-gradient-to-br from-purple-100 via-blue-100 to-cyan-100 flex flex-col items-center justify-center p-4">
    <main class="w-full max-w-md mx-auto bg-white/90 backdrop-blur-lg rounded-2xl shadow-xl p-6">
      
      <!-- Profile Section -->
      <section class="flex flex-col items-center text-center mb-6">
        <ProfileImage 
          src={profile.avatar} 
          alt={`Avatar de ${profile.name}`} 
          className="w-24 h-24 mb-4 border-2 border-white shadow-md"
          client:visible
        />
        <h1 class="text-xl font-semibold text-gray-800">{profile.name}</h1>
        <p class="text-gray-500 text-sm">{profile.handle}</p>
        
        <!-- Small Social Icons -->
        <div class="flex justify-center space-x-4 mt-3">
          {socialLinks.map(link => (
            <a 
              href={link.href} 
              target="_blank" 
              rel="noopener noreferrer" 
              aria-label={link.text}
              class="text-gray-500 hover:text-gray-800 transition-colors"
            >
              <link.Icon className="w-5 h-5" />
            </a>
          ))}
        </div>
      </section>

      <!-- Links Sections -->
      <div class="space-y-6">
        {mainLinks.map(section => (
          <section> 
            <div class="text-center mb-4">
              <h2 class="text-lg font-semibold text-gray-800 mb-1">
                {section.title}
              </h2>
              
            </div>
            <div class="flex flex-col space-y-3">
              {section.links.map(link => {
                const IconComponent = getIconComponent(link.Icon);
                return (
                  <a href={link.href} target={link.href.startsWith('/') ? '_self' : '_blank'} rel="noopener noreferrer" class="block w-full no-underline">
                    <Button 
                      variant="outline" 
                      className={`
                        w-full justify-center px-4 py-6 text-base bg-white hover:bg-gray-50 shadow-sm border-gray-200 h-auto min-h-[3.5rem] transition-all duration-300
                        ${link.glow ? 'animate-pulse shadow-lg shadow-purple-200 border-purple-200 hover:shadow-xl hover:shadow-purple-300 hover:border-purple-300' : ''}
                      `}
                      style={link.glow ? {
                        background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.05) 0%, rgba(59, 130, 246, 0.05) 50%, rgba(6, 182, 212, 0.05) 100%)',
                      } : {}}
                    >
                      {IconComponent && <IconComponent className={`w-5 h-5 mr-3 ${link.glow ? 'text-purple-500' : 'text-gray-500'} flex-shrink-0`} />}
                      <span class={`flex-1 text-center leading-relaxed ${link.glow ? 'text-gray-800 font-medium' : ''}`}>
                        {link.text}
                      </span>
                    </Button>
                  </a>
                );
              })}
            </div>
          </section>
        ))}
      </div>

    </main>
    <footer class="text-center text-gray-500 text-sm mt-6">
      Si lees esto ten un buen dÃ­a ðŸ˜„
    </footer>
  </div>

  <style>
    @keyframes subtle-glow {
      0%, 100% {
        box-shadow: 0 0 20px rgba(147, 51, 234, 0.1), 0 0 40px rgba(59, 130, 246, 0.05);
      }
      50% {
        box-shadow: 0 0 30px rgba(147, 51, 234, 0.2), 0 0 60px rgba(59, 130, 246, 0.1);
      }
    }
    
    .animate-pulse {
      animation: subtle-glow 3s ease-in-out infinite;
    }
  </style>
</Layout> 